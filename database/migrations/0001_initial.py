# Generated by Django 2.2.2 on 2019-07-05 21:06

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CollectionOfSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('title', models.CharField(help_text='The title of this Collection of Sources', max_length=200)),
                ('editorial_notes', models.TextField(blank=True, help_text='Any editorial notes the user deems necessary', null=True)),
                ('date_range_year_only', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, help_text='The year range of this Collection. If the year is known precisely, enter only one value. If not, enter a lower and upper bound', null=True)),
                ('url', models.URLField(blank=True, help_text='An URL that identifies this Collection of Sources', null=True)),
            ],
            options={
                'verbose_name_plural': 'Collections of Sources',
                'db_table': 'collection_of_sources',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EncodingWorkFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the EncodingWorkflow', max_length=200)),
                ('work_flow_text', models.TextField(blank=True, help_text='A description of the workflow that was used to encode a Filein the database', null=True)),
                ('work_flow_file', models.FileField(blank=True, help_text='A file that describes or defines the workflow that was used to encode a File in the database', null=True, upload_to='workflows/')),
                ('notes', models.TextField(blank=True, help_text='Any extra notes or remarks the user wishes to provide', null=True)),
            ],
            options={
                'db_table': 'encoding_workflow',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('file_type', models.CharField(choices=[('sym', 'Symbolic Music'), ('txt', 'Text'), ('img', 'Image'), ('audio', 'Audio')], default='sym', help_text='The type of the file', max_length=10)),
                ('file_format', models.CharField(help_text='The format of the file', max_length=10)),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='The size of the file in bytes', null=True)),
                ('version', models.CharField(blank=True, help_text='The version of the encoding schema i.e. MEI 2.0', max_length=20, null=True)),
                ('encoding_date', models.DateTimeField(help_text='The date the File was ncoded', null=True)),
                ('extra_metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Any extra metadata associated with the File', null=True)),
                ('file', models.FileField(help_text='The actual file', upload_to='user_files/')),
                ('encoding_workflow', models.ForeignKey(blank=True, help_text='The Encoding Worflow of this File', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.EncodingWorkFlow')),
            ],
            options={
                'db_table': 'files',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenreAsInStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the GenreAsInStyle', max_length=200)),
            ],
            options={
                'db_table': 'genre_as_in_style',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenreAsInType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the GenreAsInStyle', max_length=200)),
            ],
            options={
                'db_table': 'genre_as_in_type',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeographicArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the Geographic Area', max_length=200)),
                ('authority_control_url', models.URLField(blank=True, help_text='An URI linking to an authority control description of this Geographic Area', null=True)),
                ('authority_control_key', models.IntegerField(blank=True, help_text='The identifier of this Geographic Area in the authority control', null=True, unique=True)),
                ('part_of', models.ForeignKey(blank=True, help_text='The "parent area" of this Geographic Area. Example: Montreal has as parent area Quebec', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_areas', to='database.GeographicArea')),
            ],
            options={
                'db_table': 'geographic_area',
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the Instrument or Voice', max_length=200)),
            ],
            options={
                'db_table': 'instrument',
            },
        ),
        migrations.CreateModel(
            name='MusicalWork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('variant_titles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=200), default=list, help_text='All the titles commonly attributed to this musical work. Include the opus or catalogue number if there is one.', size=None)),
                ('_sacred_or_secular', models.NullBooleanField(default=None, help_text='Leave blank if not applicable.')),
                ('authority_control_url', models.URLField(blank=True, help_text='URI linking to an authority control description of this musical work.', null=True)),
                ('authority_control_key', models.IntegerField(blank=True, help_text='The identifier of this musical work in the authority control', null=True, unique=True)),
                ('search_document', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('genres_as_in_style', models.ManyToManyField(help_text='e.g., classical, opera, folk', related_name='musical_works', to='database.GenreAsInStyle')),
                ('genres_as_in_type', models.ManyToManyField(help_text='e.g., sonata, motet, 12-bar blues', related_name='musical_works', to='database.GenreAsInType')),
                ('related_works', models.ManyToManyField(blank=True, help_text='MusicalWorks that are related to this MusicalWork, for instance, one is an arrangement of the other', related_name='_musicalwork_related_works_+', to='database.MusicalWork')),
            ],
            options={
                'verbose_name_plural': 'Musical Works',
                'db_table': 'musical_work',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('musical_work', models.ForeignKey(help_text='The MusicalWork to which this Part belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parts', to='database.MusicalWork')),
            ],
            options={
                'db_table': 'part',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('title', models.CharField(help_text='The title of this Section', max_length=200)),
                ('ordering', models.PositiveIntegerField(blank=True, help_text='A number representing the position of this Section within a Musical Work', null=True)),
                ('search_document', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('musical_work', models.ForeignKey(help_text='Reference to the MusicalWork of which this Section is part. A Section must reference a MusicalWork even if it has parent Sections', on_delete=django.db.models.deletion.PROTECT, related_name='sections', to='database.MusicalWork')),
                ('parent_sections', models.ManyToManyField(blank=True, help_text='Sections that contain his Section', related_name='child_sections', to='database.Section')),
                ('related_sections', models.ManyToManyField(blank=True, help_text='Sections that are related to this Section (i.e. derived from it, or the same music but used in a different MusicalWork)', related_name='_section_related_sections_+', to='database.Section')),
            ],
            options={
                'db_table': 'section',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the Software', max_length=100)),
                ('version', models.CharField(blank=True, default='', help_text='The version of the Software', max_length=10)),
            ],
            options={
                'db_table': 'software',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('portion', models.CharField(blank=True, help_text=' A description of which portion of the CollectionOfSources this Source represents, for instance, page numbers or folio', max_length=200, null=True)),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sources', to='database.CollectionOfSources')),
                ('parent_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_sources', to='database.Source')),
            ],
            options={
                'db_table': 'source',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TypeOfSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of this Type of Section', max_length=200)),
            ],
            options={
                'db_table': 'type_of_section',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ValidationWorkFlow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the ValidationWorkflow', max_length=200)),
                ('work_flow_text', models.TextField(blank=True, help_text='A description of the workflow that was used to encode a Filein the database', null=True)),
                ('work_flow_file', models.FileField(blank=True, help_text='A file that describes or defines the workflow that was used to encode a File in the database', null=True, upload_to='workflows/')),
                ('notes', models.TextField(blank=True, help_text='Any extra notes or remarks the user wishes to provide', null=True)),
                ('validator_sofware', models.ForeignKey(blank=True, help_text='The Software that was used in this Validation Workflow', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validation_worflows', to='database.Software')),
            ],
            options={
                'db_table': 'validation_workflow',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceInstantiation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('parts', models.ManyToManyField(blank=True, help_text='The Part or Parts manifested in full by this Source Instantiation', related_name='source_instantiations', to='database.Part')),
                ('sections', models.ManyToManyField(blank=True, help_text='The Section or Sections manifested in full by this Source Instantiation', related_name='source_instantiations', to='database.Section')),
                ('source', models.ForeignKey(help_text='The Source that this source Instantiation instantiates', on_delete=django.db.models.deletion.CASCADE, related_name='source_instantiations', to='database.Source')),
                ('work', models.ForeignKey(blank=True, help_text='The Musical Work manifested in part or in full by this Source Instantiation', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source_instantiations', to='database.MusicalWork')),
            ],
            options={
                'db_table': 'source_instantiation',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='section',
            name='type_of_section',
            field=models.ForeignKey(blank=True, help_text='The type of this section, e.g. Aria, Minuet, Chorus, Bridge', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sections', to='database.TypeOfSection'),
        ),
        migrations.CreateModel(
            name='ResearchCorpus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('title', models.CharField(help_text='The title of this Research Corpus', max_length=200)),
                ('creators', models.CharField(blank=True, help_text='The creators of this Research Corpus', max_length=200)),
                ('curators', models.CharField(blank=True, help_text='The curators of this Research Corpus', max_length=200)),
                ('doi_link', models.URLField(blank=True, help_text='An DOI linking to a research corpus saved in Zenodo ', null=True)),
                ('files', models.ManyToManyField(help_text='The Symbolic Music Files that his Research Corpus contains', related_name='in_corpora', to='database.File')),
            ],
            options={
                'verbose_name_plural': 'Research Corpora',
                'db_table': 'research_corpus',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('given_name', models.CharField(default='', help_text='The given name of this Person', max_length=100)),
                ('surname', models.CharField(blank=True, default='', help_text='The surname of this Person, eave blank if it is unknown', max_length=100)),
                ('birth_date_range_year_only', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, help_text='The birth year range of this person. If the year is known precisely, enter only one value. If not, enter a lower and upper bound', null=True)),
                ('death_date_range_year_only', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, help_text='The death year range of this person. If the year is known precisely, enter only one value. If not, enter a lower and upper bound', null=True)),
                ('authority_control_url', models.URLField(blank=True, help_text='An URI linking to an authority control description of this Person', null=True)),
                ('authority_control_key', models.IntegerField(blank=True, help_text='The identifier of his Person n the authority ontrol', null=True, unique=True)),
                ('birth_location', models.ForeignKey(blank=True, help_text='The birth location of this Person. Choose the most specific possible.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='birth_location_of', to='database.GeographicArea')),
                ('death_location', models.ForeignKey(blank=True, help_text='The death location of this Person. Choose the most specific possible.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='death_location_of', to='database.GeographicArea')),
            ],
            options={
                'db_table': 'person',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='part',
            name='section',
            field=models.ForeignKey(help_text='The Section to which this Part belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parts', to='database.Section'),
        ),
        migrations.AddField(
            model_name='part',
            name='written_for',
            field=models.ForeignKey(help_text='The Instrument or Voice for which this Part is written', on_delete=django.db.models.deletion.PROTECT, related_name='parts', to='database.Instrument'),
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the Institution', max_length=255)),
                ('website', models.URLField(blank=True, help_text='A link to the website of the institution')),
                ('located_at', models.ForeignKey(help_text='The area in which the nstitution is located', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='institutions', to='database.GeographicArea')),
            ],
            options={
                'db_table': 'institution',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='file',
            name='manifests',
            field=models.ForeignKey(help_text='The SourceInstantiation anifested by this File', on_delete=django.db.models.deletion.CASCADE, related_name='manifested_by_files', to='database.SourceInstantiation'),
        ),
        migrations.AddField(
            model_name='file',
            name='validation_workflow',
            field=models.ForeignKey(blank=True, help_text='The Validation Worflow of this File', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.ValidationWorkFlow'),
        ),
        migrations.CreateModel(
            name='FeatureType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the Extracted FeatureType', max_length=200)),
                ('code', models.CharField(help_text='The jSymbolic code of the Extracted eatureType', max_length=5)),
                ('description', models.TextField(blank=True, help_text='A description of the Extracted eatureType')),
                ('is_sequential', models.NullBooleanField(help_text='whether a feature can be extracted from sequential windows of a data instance (e.g. individual measures, sections, etc.); a value of true means that it can, a value of false means that only one feature value may be extracted per instance (i.e. per symbolic feature file)')),
                ('dimensions', models.PositiveIntegerField(help_text='The number of imensions of the xtracted FeatureType')),
                ('min_val', models.FloatField(blank=True, help_text='The minimum value of this Extracted FeatureType across all files that have this feature', null=True)),
                ('max_val', models.FloatField(blank=True, help_text='The maximum value of this Extracted FeatureType across all files that have this feature', null=True)),
                ('software', models.ForeignKey(default='', help_text='The software that defines this feature type', on_delete=django.db.models.deletion.PROTECT, to='database.Software')),
            ],
            options={
                'db_table': 'feature',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('file_type', models.CharField(help_text='The format of the File', max_length=100)),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='The size of the File in bytes', null=True)),
                ('file', models.CharField(help_text='The actual file URL', max_length=300)),
                ('config_file', models.CharField(default='', help_text='The config file URL', max_length=300)),
                ('feature_definition_file', models.CharField(default='', help_text='The feature definition file URL', max_length=300)),
                ('extracted_with', models.ForeignKey(help_text='The Software used to extractthese features', on_delete=django.db.models.deletion.PROTECT, related_name='feature_files', to='database.Software')),
                ('features_from_file', models.ForeignKey(help_text='File that the features were extracted from', on_delete=django.db.models.deletion.CASCADE, related_name='feature_files', to='database.File')),
            ],
            options={
                'db_table': 'feature_file',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExtractedFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), help_text='The value of the Extracted Feature. Encoded as an array but if the Extracted Feature is scalar it is an array of length = 1', size=None)),
                ('extracted_with', models.ForeignKey(help_text='The Software used to extractthis Extracted Feature', on_delete=django.db.models.deletion.PROTECT, to='database.Software')),
                ('feature_files', models.ManyToManyField(help_text='The Feature Files that contain this feature', related_name='features', to='database.FeatureFile')),
                ('feature_of', models.ForeignKey(help_text='The File from which the feature was extracted', on_delete=django.db.models.deletion.CASCADE, related_name='features', to='database.File')),
                ('instance_of_feature', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instances', to='database.FeatureType')),
            ],
            options={
                'db_table': 'extracted_feature',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentalStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('title', models.CharField(help_text='The title of the Experimental Study', max_length=200)),
                ('link', models.URLField(blank=True, help_text='A link to a paper of the Experimental Study')),
                ('research_corpus_used', models.ForeignKey(help_text='The Research Corpus upon which this Experimental Study is based', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='studies', to='database.ResearchCorpus')),
            ],
            options={
                'verbose_name_plural': 'Experimental Studies',
                'db_table': 'experimental_study',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='encodingworkflow',
            name='encoding_sofware',
            field=models.ForeignKey(blank=True, help_text='The Software that was used in this Encoding Workflow', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encoding_worflows', to='database.Software'),
        ),
        migrations.CreateModel(
            name='ContributionSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('certainty_of_attribution', models.NullBooleanField(help_text='Whether it is certain if this Person made this contribution')),
                ('role', models.CharField(choices=[('COMPOSER', 'Composer'), ('ARRANGER', 'Arranger'), ('AUTHOR', 'Author of Text'), ('TRANSCRIBER', 'Transcriber'), ('IMPROVISER', 'Improviser'), ('PERFORMER', 'Performer')], default='COMPOSER', help_text='The role that this Person had in contributing. Can be one of: Composer, Arranger, Author of Text, Transcriber, Improviser, Performer', max_length=30)),
                ('date_range_year_only', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, help_text='The year range of this contribution. If the year is known precisely, enter only one value. If not, enter a lower and upper bound', null=True)),
                ('contributed_to_section', models.ForeignKey(help_text='The Section that the Person contributed to', on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='database.Section')),
                ('location', models.ForeignKey(blank=True, help_text='The location in which this contribution happened', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.GeographicArea')),
                ('person', models.ForeignKey(help_text='The Person that contributed to a Section', on_delete=django.db.models.deletion.PROTECT, related_name='contributions_sections', to='database.Person')),
            ],
            options={
                'verbose_name': 'Contribution to Section',
                'verbose_name_plural': 'Contributions to Sections',
                'db_table': 'contribution_section',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContributionMusicalWork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('certainty_of_attribution', models.NullBooleanField(help_text='Whether it is certain if this Person made this contribution')),
                ('role', models.CharField(choices=[('COMPOSER', 'Composer'), ('ARRANGER', 'Arranger'), ('AUTHOR', 'Author of Text'), ('TRANSCRIBER', 'Transcriber'), ('IMPROVISER', 'Improviser'), ('PERFORMER', 'Performer')], default='COMPOSER', help_text='The role that this Person had in contributing. Can be one of: Composer, Arranger, Author of Text, Transcriber, Improviser, Performer', max_length=30)),
                ('date_range_year_only', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, help_text='The year range of this contribution. If the year is known precisely, enter only one value. If not, enter a lower and upper bound', null=True)),
                ('contributed_to_work', models.ForeignKey(help_text='The Musical Work that the Person contributed to', on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='database.MusicalWork')),
                ('location', models.ForeignKey(blank=True, help_text='The location in which this contribution happened', null=True, on_delete=django.db.models.deletion.SET_NULL, to='database.GeographicArea')),
                ('person', models.ForeignKey(help_text='The Person that contributed to a Musical Work', on_delete=django.db.models.deletion.PROTECT, related_name='contributions_works', to='database.Person')),
            ],
            options={
                'verbose_name': 'Contribution to Musical Work',
                'verbose_name_plural': 'Contributions to Musical Works',
                'db_table': 'contribution_musical_work',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='collectionofsources',
            name='institution_publisher',
            field=models.ForeignKey(blank=True, help_text='The Institution who published this Collection of Sources', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='published', to='database.Institution'),
        ),
        migrations.AddField(
            model_name='collectionofsources',
            name='person_publisher',
            field=models.ForeignKey(blank=True, help_text='The Person who published this Collection of Sources', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='published', to='database.Person'),
        ),
        migrations.CreateModel(
            name='Archive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date this entry was created')),
                ('date_updated', models.DateTimeField(auto_now=True, help_text='The date this entry was updated')),
                ('name', models.CharField(help_text='The name of the Archive', max_length=200)),
                ('collections', models.ManyToManyField(help_text='CollectionsOfSources that belong to this Archive', related_name='in_archive', to='database.CollectionOfSources')),
                ('institution', models.ForeignKey(blank=True, help_text='The Institution that this Archive is part of', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='archives', to='database.Institution')),
            ],
            options={
                'db_table': 'archive',
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='section',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_document'], name='section_search__38c9ee_gin'),
        ),
        migrations.AddConstraint(
            model_name='part',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('section__isnull', True), ('musical_work__isnull', False)), models.Q(('section__isnull', False), ('musical_work__isnull', True)), _connector='OR'), name='work_xor_section'),
        ),
        migrations.AddIndex(
            model_name='musicalwork',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_document'], name='musical_wor_search__ac3bb3_gin'),
        ),
    ]
